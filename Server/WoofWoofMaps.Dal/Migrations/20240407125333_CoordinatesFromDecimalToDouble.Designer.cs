// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WoofWoofMaps.Dal;

#nullable disable

namespace WoofWoofMaps.Dal.Migrations
{
    [DbContext(typeof(GeoTrackingContext))]
    [Migration("20240407125333_CoordinatesFromDecimalToDouble")]
    partial class CoordinatesFromDecimalToDouble
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WoofWoofMaps.Dal.Entities.GeoPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("GeoPoints");
                });

            modelBuilder.Entity("WoofWoofMaps.Dal.Entities.GeoRoute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GeoRoutes");
                });

            modelBuilder.Entity("WoofWoofMaps.Dal.Entities.GeoRoutePoint", b =>
                {
                    b.Property<long>("GeoPointId")
                        .HasColumnType("bigint");

                    b.Property<long>("GeoRouteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GeoPointId", "GeoRouteId", "Timestamp");

                    b.HasIndex("GeoRouteId");

                    b.ToTable("GeoRoutePoints");
                });

            modelBuilder.Entity("WoofWoofMaps.Dal.Entities.GeoRoutePoint", b =>
                {
                    b.HasOne("WoofWoofMaps.Dal.Entities.GeoPoint", "GeoPoint")
                        .WithMany("GeoRoutePoints")
                        .HasForeignKey("GeoPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WoofWoofMaps.Dal.Entities.GeoRoute", "GeoRoute")
                        .WithMany("GeoRoutePoints")
                        .HasForeignKey("GeoRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeoPoint");

                    b.Navigation("GeoRoute");
                });

            modelBuilder.Entity("WoofWoofMaps.Dal.Entities.GeoPoint", b =>
                {
                    b.Navigation("GeoRoutePoints");
                });

            modelBuilder.Entity("WoofWoofMaps.Dal.Entities.GeoRoute", b =>
                {
                    b.Navigation("GeoRoutePoints");
                });
#pragma warning restore 612, 618
        }
    }
}
